#!/bin/bash

DEFAULT_SITEPP="/etc/puppet/manifests/site.pp"
DEFAULT_MODULEPATH="/etc/puppet/modules"

help() {
    echo
    echo "Deploy puppetmaster"
    echo
    echo "Options:"
    echo "-s <path> Path of manifests/site.pp. Default is ${DEFAULT_SITEPP}."
    echo "-m <path> Modulepath. Default is ${DEFAULT_MODULEPATH}. If they are more than one, use quotes and separate them with ':'."
    echo "-r <path> Path of the puppet repository."
    echo "-l <url>  Git URL of the repository"
    echo "-t        Clone the puppet repository to /tmp, and then copy to final destination."
    echo "-u        Update the repository."
    echo "-d        Delete configs/packages before bootstrapping."
    echo "-6        Node is IPv6 only."
    echo "-a        (Gentoo only) Use app-admin/puppet ~arch and Ruby 1.9 (otherwise it will install stable app-admin/puppet and Ruby 1.8)."
    echo "-p        (Debian only) Use apt.puppetlabs.com"
    echo
    exit 1
}

if [[ $1 == "--help" ]]; then
    help
fi

DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )"
source "${DIR}/lib/operatingsystem"

SITEPP=${DEFAULT_SITEPP}
MODULEPATH=${DEFAULT_MODULEPATH}
REPOSITORY=
LINK=
UPDATE=
TEMPREPOSITORY=
DELETE=
IPV6=
UNSTABLE=
PUPPETLABS=

while getopts s:m:r:l:tud6aph arg; do
    case ${arg} in
        s) SITEPP=${OPTARG} ;;
        m) MODULEPATH=${OPTARG} ;;
        r) REPOSITORY=${OPTARG} ;;
        l) LINK=${OPTARG} ;;
        t) TEMPREPOSITORY=1 ;;
        u) UPDATE=1 ;;
        d) DELETE=1 ;;
        6) IPV6=1 ;;
        a) UNSTABLE=1 ;;
        p) PUPPETLABS=1 ;;
        h) help ;;
        *) help ;;
        ?) help ;;
    esac
done

if [[ -z ${REPOSITORY} ]] || [[ -z ${LINK} ]]; then
    help
fi

if [[ -n ${IPV6} ]] && [[ ${LINK} == *github.com* ]]; then
    GITHUB_IPV6="github.iserv.nl"
    LINK=${LINK/github.com/${GITHUB_IPV6}}
fi

if [[ -n ${TEMPREPOSITORY} ]]; then
    CLONE_REPOSITORY_PATH="/tmp/puppet_tmp"
else
    CLONE_REPOSITORY_PATH=${REPOSITORY}
fi

if [[ -n ${DELETE} ]]; then
    rm -rf /etc/puppet /var/lib/puppet
    case ${OPERATINGSYSTEM} in
        gentoo)
            /etc/init.d/puppetmaster stop
            rm -rf /etc/portage/{make.conf,package.{keywords,use}} /var/cache/eix /etc/make.conf
            emerge -Cq puppet net-tools
            emerge --depclean -q
            ;;
        suse)
            rcpuppetmasterd stop
            zypper rm -y puppet-server puppet
            ;;
        debian)
            /etc/init.d/puppetmaster stop
            apt-get remove --auto-remove -y puppetmaster puppet
            dpkg --purge puppetlabs-release
            ;;
    esac
fi

case ${OPERATINGSYSTEM} in
    gentoo)
        if [[ -n ${UNSTABLE} ]]; then
            RUBY_TARGETS="ruby19"
            echo "app-admin/puppet
            dev-ruby/hiera" > /etc/portage/package.keywords
        else
            RUBY_TARGETS="ruby18"
        fi
        [[ -n ${IPV6} ]] && GENTOO_MIRRORS="http://mirror.mcs.anl.gov/pub/gentoo/"
        GENTOO_MIRRORS=${GENTOO_MIRRORS} RUBY_TARGETS=${RUBY_TARGETS} \
            USE="old-output -minimal" emerge -q app-admin/puppet
        eselect ruby set ${RUBY_TARGETS}
        [[ -n ${UNSTABLE} ]] && rm /etc/portage/package.keywords
        ;;
    suse)
        zypper in -y puppet-server
        ;;
    debian)
        if [[ -n ${PUPPETLABS} ]]; then
            wget http://apt.puppetlabs.com/puppetlabs-release-squeeze.deb -P /tmp
            dpkg -i /tmp/puppetlabs-release-squeeze.deb
        fi
        apt-get install -y puppet puppetmaster
        /etc/init.d/puppetmaster stop
        killall puppet
        ;;
esac

if [[ -d ${CLONE_REPOSITORY_PATH} ]]; then
    if [[ -n ${UPDATE} ]]; then
        pushd ${CLONE_REPOSITORY_PATH}
        git pull
        popd
    fi
else
    git clone ${LINK} ${CLONE_REPOSITORY_PATH}
    pushd ${CLONE_REPOSITORY_PATH}
    git submodule init
    [[ -n ${IPV6} ]] && find .git -type f -name config -exec sed -i -e "s/github.com/${GITHUB_IPV6}/g" {} \;
    git submodule update
    popd
fi

[[ -n ${TEMPREPOSITORY} ]] && cp -r ${CLONE_REPOSITORY_PATH} ${REPOSITORY}

echo "[main]
  modulepath = ${MODULEPATH}
" > /etc/puppet/puppet.conf

export RUBYLIB=$(find $(echo ${MODULEPATH} | tr ':' ' ') -type d -name lib -print0 | tr '\0' ':')

puppet apply --debug --verbose ${SITEPP}
