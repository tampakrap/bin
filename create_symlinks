#!/bin/bash
# This script creates symlinks of the various personal scripts I keep in my tampakrap/scripts.git repository

. /etc/init.d/functions.sh

if [[ $(whoami) != "root" ]]; then
    eerror "Must be run as root, terminating"
    exit 1
fi

USER="tampakrap"

function _repository() {
    if [[ -n ${HOMEDIR} ]]; then
        REPOSITORY="/home/$USER/Source_Code/tampakrap/scripts"
    else
        REPOSITORY="/var/repos/scripts"
        einfo "Updating repository"
        pushd $REPOSITORY > /dev/null 2>&1
        git pull | grep -q -v 'Already up-to-date.' && CHANGED=1
        popd > /dev/null 2>&1
        einfo "Done"
        [[ -n $CHANGED ]] && einfo "Restarting the script" && $0 && exit
    fi

    [[ -n ${WORK} ]] && WORK_REPOSITORY="/home/$USER/Source_Code/suse/$USER/scripts"

    source $REPOSITORY/create_symlinks_functions
}

function _update_scripts() {
    einfo "Updating scripts for ${HOSTNAME}"

    local DESTINATIONS="/usr/local/sbin /usr/local/bin"

    # Install the scripts
    for DESTINATION in ${DESTINATIONS}; do
        if [[ ${DESTINATION} == "/usr/local/sbin" ]]; then
            SCRIPTS=${SBIN}
        else
            SCRIPTS=${BIN}
        fi
        for FILE in ${SCRIPTS}; do
            TARGET=${FILE}
            SOURCE_DIR="${REPOSITORY}"
            _install_file
        done
        # Install additional work scripts that reside in WORK_REPOSITORY
        [[ -n ${WORK} ]] && ${WORK_REPOSITORY}/create_work_symlinks
    done

    einfo "Done"
}

function _update_configs() {
    einfo "Updating configs for ${HOSTNAME}"

    SOURCE_DIR="${REPOSITORY}/configs"
    for FILE in `ls ${SOURCE_DIR}`; do
        IGNORE=''
        case $FILE in
            user.*)
                DESTINATION="/home/$USER"
                if [[ -n ${HOMEDIR} ]]; then
                    case $FILE in
                        user.ssh) TARGET=".ssh/config" ;;
                        user.gpg-agent.conf) TARGET=".gnupg/${FILE#*.}" ;;
                        *) TARGET=".${FILE#*.}" ;;
                    esac
                elif [[ $FILE == "user.vimrc" ]]; then
                    TARGET=".${FILE#*.}"
                else
                    IGNORE=1
                fi
                ;;
            root.*)
                DESTINATION="/root"
                TARGET=".${FILE#*.}"
                ;;
            etc.*)
                DESTINATION="/etc"
                case $FILE in
                    etc.vimrc.local) TARGET="vim/${FILE#*.}" ;;
                    *) TARGET="${FILE#*.}" ;;
                esac
                ;;
        esac
        [[ -n $IGNORE ]] || _install_file
    done

    einfo "Done"
}

function _update_crons() {
    einfo "Updating cron jobs for $HOSTNAME"

    SOURCE_DIR="${REPOSITORY}"

    for FILE in keychain-clear update-notifier gorg_update boxes_backup_cron; do
        if [[ $SBIN =~ "${FILE}" ]]; then
            TARGET=$FILE
            case $FILE in
                keychain-clear) DESTINATION="/etc/cron.hourly" ;;
                update-notifier) DESTINATION="/etc/cron.weekly" ;;
                gorg_update) DESTINATION="/etc/cron.hourly" ;;
                boxes_backup_cron) DESTINATION="/etc/cron.daily" ;;
            esac
        fi
        _install_file
    done

    einfo "Done"
}

case $HOSTNAME in
    canibus)
        SBIN="cleanup create_symlinks emerge-tmpfs host-update update"
        BIN="create_repolinks git packagelist random_password ssh wakeonlan"
        HOMEDIR=1
        ;;
    virtuoso)
        SBIN="cleanup create_symlinks emerge-tmpfs host-update update"
        BIN="create_repolinks music-sync git packagelist random_password ssh wakeonlan"
        HOMEDIR=1
        WORK=1
        ;;
    madlib)
        SBIN="cleanup create_symlinks emerge-tmpfs host-update update"
        BIN="random_password wakeonlan"
        ;;
    eyedea)
        SBIN="cleanup create_symlinks emerge-tmpfs host-update update-notifier"
        BIN="random_password wakeonlan"
        ;;
    evidence)
        SBIN="cleanup create_symlinks emerge-tmpfs host-update update-notifier"
        BIN="random_password wakeonlan"
        ;;
    everlast)
        SBIN="cleanup create_symlinks emerge-tmpfs host-update update-notifier"
        BIN="random_password wakeonlan"
        ;;
    raekwon)
        SBIN="cleanup create_symlinks emerge-tmpfs gorg_update update-notifier"
        BIN="random_password wakeonlan"
        ;;
    xzibit)
        SBIN="boxes_backup boxes_backup_cron cleanup create_symlinks emerge-tmpfs host-update keychain-clear update"
        BIN="create_repolinks git packagelist random_password ssh wakeonlan"
        HOMEDIR=1
        WORK=1
        ;;
    *)
        eerror "${HOSTNAME} not found, terminating"
        exit 1
esac

_repository
_update_scripts
_update_configs
_update_crons
